package com.login.googleconfig;

import javax.inject.Inject;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.crypto.encrypt.Encryptors;
import org.springframework.social.UserIdSource;
import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;
import org.springframework.social.config.annotation.SocialConfigurer;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.facebook.connect.FacebookConnectionFactory;
import org.springframework.social.google.connect.GoogleConnectionFactory;
import org.springframework.social.linkedin.connect.LinkedInConnectionFactory;
import org.springframework.social.twitter.connect.TwitterConnectionFactory;

@Configuration
public class SocialConfig implements SocialConfigurer{

    @Inject
    private Environment environment;

    @Autowired
    DataSource dataSource;
	@Override
	public void addConnectionFactories(ConnectionFactoryConfigurer connectionFactoryConfigurer,
			Environment environment) {
		connectionFactoryConfigurer.addConnectionFactory(new TwitterConnectionFactory(
		            environment.getProperty("twitter.consumerKey"),
		            environment.getProperty("twitter.consumerSecret")));
		connectionFactoryConfigurer.addConnectionFactory(new FacebookConnectionFactory(
		            environment.getProperty("facebook.clientId"),
		            environment.getProperty("facebook.clientSecret")));
		connectionFactoryConfigurer.addConnectionFactory(new LinkedInConnectionFactory(
		            environment.getProperty("linkedin.consumerKey"),
		            environment.getProperty("linkedin.consumerSecret")));
		connectionFactoryConfigurer.addConnectionFactory(new GoogleConnectionFactory(
				environment.getProperty("google.consumerKey"),
	            environment.getProperty("google.consumerSecret")));
		
		
		
	}

//	@Override
//	public UserIdSource getUserIdSource() {
//		
//		return new AuthenticationNameUserIdSource();
//	}

	@Override
	public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {
		
		return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());
	}

}