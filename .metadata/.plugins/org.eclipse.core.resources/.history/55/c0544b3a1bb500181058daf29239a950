package com.prpl.controller;

import java.io.IOException;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import com.prpl.model.Address;
import com.prpl.model.Image;
import com.prpl.model.Users;
import com.prpl.service.ServiceAddressDao;
import com.prpl.service.ServiceDao;

@Controller
public class UserController {

	@Autowired

	private ServiceDao dao;

	public void setServiceDao(ServiceDao dao) {
		this.dao = dao;
	}

	@Autowired
	ServiceAddressDao adao;

	public void setServiceAddressDao(ServiceAddressDao adao) {
		this.adao = adao;
	}

	@RequestMapping(value = "/users", method = RequestMethod.GET)
	public ModelAndView getdata(ModelAndView model,  @ModelAttribute("image") Image image) throws IOException {

		List<Users> list = dao.getlist();
		System.out.println(list.toString()+"\n");

		Iterator<Users> it = list.iterator();

		List<Image> imglist = new ArrayList<Image>();
		while (it.hasNext()) {
			Users usr = it.next();
			Image img = new Image();
			img.setId(usr.getId());
			img.setFirstname(usr.getFirstname());
			img.setLastname(usr.getLastname());
			img.setAge(usr.getAge());
			img.setRole(usr.getRole());
			img.setUsername(usr.getUsername());
			img.setPassword(usr.getPassword());
			img.setAddress(usr.getAddress());
			img.setData(usr.getData());
			img.setFilename(usr.getFilename());

			System.out.println(usr.getFilename()+"::::::::::::::");
			byte[] buf = img.getData();
	
			
			byte[] encodedBytes = Base64.getEncoder().encode(buf);

			String originalString = new String(encodedBytes, "UTF-8");

			img.setImageData(originalString);
			imglist.add(img);
			model = new ModelAndView("admin");
			model.addObject("lists", imglist);

		}
		return model;

	}
	@RequestMapping(value = "/newuser", method = RequestMethod.GET)
	public ModelAndView newuser(ModelAndView model) {
		Users user = new Users();
		List<Address> list = adao.getlist();
		model = new ModelAndView("register");
		model.addObject("user", user);
		model.addObject("addresslists", list);

		return model;
	}

	@RequestMapping(value = "/saveuser", method = RequestMethod.POST)
	public ModelAndView saveuser(@ModelAttribute("user") Users user,
			@RequestParam("file") MultipartFile file,
			
			@RequestParam("role") String role) throws IOException {

		String filename = file.getOriginalFilename();
		System.out.println(filename);

		byte[] bytes = file.getBytes();
		byte[] encodedBytes = Base64.getEncoder().encode(bytes);
	
		String originalString = new String(encodedBytes, "UTF-8");
		
		user.setFilename(filename);
		user.setData(bytes);
		
		
		if (user.getRole().equals("user")) {

			if (user.getId() == 0) {

				dao.adduser(user);

			} else {

				dao.updateuser(user);

			}
		} else {
			return new ModelAndView("redirect:/newuser");
		}

		return new ModelAndView("redirect:/users");

	}
	
	
	@RequestMapping(value = "/edituser", method = RequestMethod.GET)
	public ModelAndView editContact(@RequestParam("id") int id, ModelAndView model)
			throws UnsupportedEncodingException {
		System.out.println(id + ":::::::ID");
		

	Users usr =  dao.getuserbyid(id);
		System.out.println(usr.toString());
		Image img = new Image();
		img.setId(usr.getId());
		img.setFirstname(usr.getFirstname());
		img.setLastname(usr.getLastname());
		img.setAge(usr.getAge());
		img.setRole(usr.getRole());
		img.setUsername(usr.getUsername());
		img.setPassword(usr.getPassword());
		img.setAddress(usr.getAddress());
		img.setData(usr.getData());
		
		byte[] buf = img.getData();
		byte[] encodedBytes = Base64.getEncoder().encode(buf);

		String originalString = new String(encodedBytes, "UTF-8");

		img.setImageData(originalString);

		model.addObject("image", img);
		model = new ModelAndView("update");

		List<Address> list = adao.getlist();
		model = new ModelAndView("update");
		model.addObject("image", img);
		model.addObject("addresslists", list);
		System.out.println(list.toString());

		return model;

	}
	
	
		
		

	

	@RequestMapping(value = "/updateuser", method = RequestMethod.POST)
	public ModelAndView updateuser(@RequestParam("id") long id ,@ModelAttribute("image") Image image )
	{
		System.out.println(id+"::::::::::::");
	
	
		Users user=new Users();
		user=dao.getuserbyid(image.getId());
		
		System.out.println(user.toString());
		
		if(image.getAddress()!=null)
		{
			user.setAddress(image.getAddress());
		}
		
		
		
		
		user.setAge(image.getAge());
		if(user.getData()!=null)
		{
		user.setData(image.getData());
		}
		user.setFirstname(image.getFirstname());
		System.out.println(user.getFirstname()+":::::::::");
		user.setLastname(image.getLastname());
		user.setPassword(image.getPassword());
		user.setUsername(image.getUsername());
		
		
		
dao.updateuser(user);
ModelAndView model=new ModelAndView();


return  new ModelAndView("redirect:/users")	;	
	}
	
	
	
	@RequestMapping("/remove/{id}")
	public String removeuser(@PathVariable("id") int id) {
		System.out.println(id);

		dao.deleteuser(id);
		return "redirect:/users";
	}
	
	
	
	
	
	
	
	

}




