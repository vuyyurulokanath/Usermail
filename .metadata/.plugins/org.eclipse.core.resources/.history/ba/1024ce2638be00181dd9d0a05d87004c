package com.prpl.controller;

import java.io.IOException;

import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.prpl.dao.UserRepository;
import com.prpl.model.LoginModel;
import com.prpl.model.User;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@RestController
@RequestMapping("/user")
public class UserController {
	private UserRepository userRepository;
	 private BCryptPasswordEncoder bCryptPasswordEncoder;

	public UserController(UserRepository userRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
		this.userRepository = userRepository;
		this.bCryptPasswordEncoder=bCryptPasswordEncoder;
		
		
System.out.println("going to controller");
	}

	@PostMapping(value = "/signup", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public void UserSignup(@RequestBody User user, @RequestParam("file") MultipartFile file) throws IOException {
	
		String filename = file.getOriginalFilename();
		byte[] bytes = file.getBytes();
		user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
		user.setFilename(filename);
		user.setImage(bytes);

		userRepository.save(user);
	}

	@PostMapping("/login")
	public ResponseEntity<String> login(@RequestBody LoginModel login) throws ServletException {

		String jwtToken = "";
System.out.println(login.getUsername()+"::::::::::::::::::::::");
System.out.println(login.getPassword()+":::::::::::::::::::::::::");
		if (login.getUsername() == null || login.getPassword() == null) {
			System.out.println("going to if loop");

			return new ResponseEntity<>("please enter user name & password", HttpStatus.BAD_REQUEST);
		}

		String username = login.getUsername();
		String password = login.getPassword();

		User user = userRepository.findByUsername(username);
		System.out.println(user+":::::::::::::::::::::::::;;");

		if (user == null) {
			return new ResponseEntity<>("username not found", HttpStatus.BAD_REQUEST);

		}

		String pwd = user.getPassword();

		if (!password.equals(pwd)) {
			return new ResponseEntity<>("Invalid login , please check your password",
					HttpStatus.BAD_REQUEST);
		}

		jwtToken = Jwts.builder().setSubject(username).claim("roles", "user").setIssuedAt(new Date())
				.signWith(SignatureAlgorithm.HS256, "secretkey").compact();
		
		return new ResponseEntity<>(jwtToken, HttpStatus.OK);
		
	}

	@GetMapping("/userdetails")
	public ResponseEntity<User> getuserdetails(HttpServletRequest request) {
		String header = request.getHeader("Authorization");

		String username = Jwts.parser().setSigningKey("secretkey").parseClaimsJws(header).getBody().getSubject();

		User user = userRepository.findByUsername(username);

		return new ResponseEntity<>(user, HttpStatus.OK);

	}

	@PutMapping("/update")
	public ResponseEntity<User> updateuser(HttpServletRequest request, @RequestBody User user) {

		String header = request.getHeader("Authorization");

		String username = Jwts.parser().setSigningKey("secretkey").parseClaimsJws(header).getBody().getSubject();

		User usr = userRepository.findByUsername(username);

		Long id = usr.getId();

		user.setId(id);

		userRepository.save(user);

		return new ResponseEntity<>(user, HttpStatus.OK);

	}

}
