package com.fashionapp.Controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.fashionapp.Entity.ChangePassword;
import com.fashionapp.Entity.Comments;
import com.fashionapp.Entity.FileInfo;
import com.fashionapp.Entity.FollowersGroup;
import com.fashionapp.Entity.FollowingGroup;
import com.fashionapp.Entity.HashTag;
import com.fashionapp.Entity.HashtagVideoMap;
import com.fashionapp.Entity.Likes;
import com.fashionapp.Entity.Share;
import com.fashionapp.Entity.Status;
import com.fashionapp.Entity.UserInfo;
import com.fashionapp.Entity.UserGroupMap;
import com.fashionapp.Repository.CommentsRepository;
import com.fashionapp.Repository.FileInfoRepository;
import com.fashionapp.Repository.FollowersGroupRepository;
import com.fashionapp.Repository.FollowingGroupRepository;
import com.fashionapp.Repository.HashTagRepository;
import com.fashionapp.Repository.HashtagVideoMapRepository;
import com.fashionapp.Repository.LikeRepository;
import com.fashionapp.Repository.ShareRepository;
import com.fashionapp.Repository.UserDetailsRepository;
import com.fashionapp.Repository.UserGroupMapRepository;
import com.fashionapp.filestorage.FileStorage;
import com.fashionapp.securityconfiguration.JwtTokenGenerator;
import com.fashionapp.util.EmailSender;

import com.fashionapp.util.PasswordEncryptDecryptor;
import com.fashionapp.util.ServerResponse;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Controller
@RequestMapping(value = "/userdetails")
@Api(value = "UserDetailsController")

public class UserDetailsController {

	Logger log = LoggerFactory.getLogger(this.getClass().getName());

	@Autowired
	private UserDetailsRepository userDetailsRepository;

	@Autowired
	private FileInfoRepository fileInfoRepository;

	@Autowired
	private LikeRepository likeRepository;

	@Autowired
	private CommentsRepository commentsRepository;

	@Autowired
	private ShareRepository shareRepository;

	@Autowired
	FileStorage fileStorage;

	@Autowired
	private FollowingGroupRepository followingGroupRepository;

	@Autowired
	private FollowersGroupRepository followersGroupRepository;

	@Autowired
	private UserGroupMapRepository userGroupMapRepository;

	@Autowired
	private HashTagRepository hashTagRepository;

	@Autowired
	private HashtagVideoMapRepository hashtagVideoMapRepository;

	@Autowired
	private JwtTokenGenerator jwtTokenGenerator;

	@Autowired
	private EmailSender emailSender;

	@ApiOperation(value = "user-signup", response = UserInfo.class)
	@RequestMapping(value = "/signup", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> usersignup(@RequestParam("data") String data,
			@RequestParam("file") MultipartFile profileImage, @RequestParam("pwd") String pwd) throws Exception {

		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		UserInfo userDetails = null;
		ChangePassword changepwd = null;
		try {
			userDetails = new ObjectMapper().readValue(data, UserInfo.class);
			changepwd = new ObjectMapper().readValue(pwd, ChangePassword.class);
		} catch (Exception e) {
			e.printStackTrace();
		}

		UserInfo isemailExists = userDetailsRepository.findByEmail(userDetails.getEmail());
		if (isemailExists != null) {
			log.info("Email Id already exists, please choose another email id");
			response = server.getDuplicateResponse("Email Id already exists, please choose another email id", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CONFLICT);
		}
		// userDetails.setPassword(PasswordEncryptDecryptor.encrypt(userDetails.getPassword()));
		userDetails.setProfileImageName(profileImage.getOriginalFilename());

		try {
			fileStorage.storeUserProfileImage(profileImage);
			log.info("File uploaded successfully! -> filename = " + profileImage.getOriginalFilename());
		} catch (Exception e) {
			log.info("Fail! -> uploaded filename: = " + profileImage.getOriginalFilename());
		}

		Resource path = fileStorage.loadprofileImage(profileImage.getOriginalFilename());
		System.out.println("PATH :=" + path.toString());
		userDetails.setProfileImageUrl(path.toString());
		if (userDetails.getPassword() == null || userDetails.getPassword() == ""
				|| changepwd.getConformpassword() == null || changepwd.getConformpassword() == "") {
			log.info("please enter password");
			response = server.getNotFoundResponse("enter password", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		}
		if (userDetails.getPassword().length() != changepwd.getConformpassword().length()) {
			log.info("please enter correct password");
			response = server.getNotFoundResponse("invalid password", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		}

		if (userDetails.getPassword().equals(changepwd.getConformpassword())) {

			userDetails.setPassword(PasswordEncryptDecryptor.encrypt(userDetails.getPassword()));
		}

		UserInfo userData = userDetailsRepository.save(userDetails);
		emailSender.sendOnRegistration(userData.getUserName(), userData.getEmail());

		// sender.sendmail(userDetails.getEmail(), "You have succesfully
		// Registered with
		// FashionApp");

		System.out.println("creating default group");
		DefaultfollowingGroup(userDetails.getId(), userDetails.getEmail());
		// DefaultfollowersGroup(userDetails.getId(), userDetails.getEmail());
		response = server.getSuccessResponse("SignUp Successful", userData);

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}

	/*
	 * TO:DO
	 * 
	 * if profile gets uploaded with image should display that ,or else default
	 * images should be displayed by category
	 * 
	 */

	/*
	 * TO:DO
	 * 
	 * 1.Separate logins for admin and users
	 * 
	 * 2. Separate login response based on logged in category if male, male
	 * related content should occur if female ,female-content,kids ...
	 */

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> getAuthtoken(@RequestBody String data) throws Exception {
		log.info("login calling!!..");
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		UserInfo userDetails = null;

		try {
			userDetails = new ObjectMapper().readValue(data, UserInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
		}

		final UserInfo user = userDetailsRepository.findByEmail(userDetails.getEmail());
		if (user == null) {
			response = server.getNotFoundResponse("invalid email", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		}

		String pwd = PasswordEncryptDecryptor.encrypt(userDetails.getPassword());

		if (!pwd.equalsIgnoreCase(user.getPassword())) {
			log.info("Invalid password");
			response = server.getNotFoundResponse("invalid password", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		} else {
			log.info("password is valid");
		}

		final String token = jwtTokenGenerator.generateToken(user);

		response = server.getSuccessResponse("login succesful", token);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	@ApiOperation(value = "user-forgotpwd", response = UserInfo.class)
	@RequestMapping(value = "/forgotpwd", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> userforgotpwd(@RequestParam("email") String email) throws Exception {

		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		emailSender.sendOnforgotpwd(email);

		response = server.getSuccessResponse("Please login through your registered email", email);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	//
	// @ApiOperation(value = "user-forgotpwd", response = UserInfo.class)
	// @RequestMapping(value = "/forgotpwd", method = RequestMethod.POST)
	// @ResponseBody
	// public ResponseEntity<Map<String, Object>> userforgotpwd(@RequestBody
	// String data) throws Exception {
	// ServerResponse<Object> server = new ServerResponse<Object>();
	// Map<String, Object> response = new HashMap<String, Object>();
	// UserInfo userInfo = null;
	// try {// UserInfo userInfoObj =
	// userDetailsRepository.findByEmail(userInfo.getEmail());
	// userInfo = new ObjectMapper().readValue(data, UserInfo.class);
	// } catch (Exception e) {
	// e.printStackTrace();
	// }}
	//
	// UserInfo userInfoObj =
	// userDetailsRepository.findByEmail(userInfo.getEmail());
	// if (userInfoObj != null) {
	// userInfoObj.setPassword(PasswordEncryptDecryptor.encrypt(userInfo.getPassword()));
	// Date date = new Date(System.currentTimeMillis());
	// userInfoObj.setCreationDate(date);
	// UserInfo userData = userDetailsRepository.save(userInfoObj);
	// response = server.getSuccessResponse("Password changed Successfully..",
	// userInfoObj.getEmail());
	//// sender.sendmail(userInfoObj.getEmail(), "Changed Password
	// Successfully");
	//// emailSender.sendEmail(userInfoObj.getEmail(), "Changed Password
	// Successfully");
	// } else {
	// response = server.getNotFoundResponse("User is not registered", null);
	// }
	// return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	// }

	@ApiOperation(value = "user-changePwd", response = UserInfo.class)
	@RequestMapping(value = "/changePwd", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> userchangePwd(@RequestParam("data") String data,
			@RequestParam("pwd") String pwd) throws Exception {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		ChangePassword changepwd = null;
		UserInfo userInfo = null;
		try {
			userInfo = new ObjectMapper().readValue(data, UserInfo.class);
			changepwd = new ObjectMapper().readValue(pwd, ChangePassword.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		UserInfo userInfoObj = userDetailsRepository.findByEmail(userInfo.getEmail());

		if (userInfoObj != null) {

			if (userInfo.getPassword() == null || userInfo.getPassword() == "" || changepwd.getConformpassword() == null
					|| changepwd.getConformpassword() == "") {
				log.info("please enter password");
				response = server.getNotFoundResponse("enter password", null);
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
			}

			if (userInfo.getPassword().length() != changepwd.getConformpassword().length()) {
				log.info("please enter password");
				response = server.getNotFoundResponse("check password enterd", null);
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
			}

			if (userInfo.getPassword().equals(changepwd.getConformpassword())) {
				userInfoObj.setPassword(PasswordEncryptDecryptor.encrypt(userInfo.getPassword()));
			}
			Date date = new Date(System.currentTimeMillis());
			userInfoObj.setCreationDate(date);
			UserInfo userData = userDetailsRepository.save(userInfoObj);

			emailSender.sendOnchangepassword(userInfoObj.getEmail());
			response = server.getSuccessResponse("Password changed Successfully..", userData);
		} else {
			response = server.getNotFoundResponse(userInfo.getUserName() + " is not registered", null);
		}
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "list_of_users", response = UserInfo.class)
	@RequestMapping(value = "/getusers", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> getAll() throws IOException, ParseException {
		Map<String, Object> response = new HashMap<String, Object>();
		ServerResponse<Object> server = new ServerResponse<Object>();

		Iterable<UserInfo> fecthed = userDetailsRepository.findAll();
		response = server.getSuccessResponse("fetched", fecthed);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "updating userdetails", response = UserInfo.class)
	@RequestMapping(value = "/update-user", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> update(@RequestParam long id, @RequestBody String data)
			throws IOException, ParseException {

		UserInfo updatedetails = userDetailsRepository.findById(id);

		UserInfo userdetails = null;
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		try {
			userdetails = new ObjectMapper().readerForUpdating(updatedetails).readValue(data);
			System.out.println(userdetails.getPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (data == null) {
			log.info("data is null");
			response = server.getNotFoundResponse("please enter the data", data);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

		}

		UserInfo fecthed = userDetailsRepository.save(userdetails);
		response = server.getSuccessResponse("Successful", fecthed);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "updating userprofileimage", response = UserInfo.class)
	@RequestMapping(value = "/update-image", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> updateprofileimage(@RequestParam long id,
			@RequestParam("file") MultipartFile profileImage) throws IOException, ParseException {
		UserInfo user = userDetailsRepository.findById(id);
		UserInfo userdetails = user;
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		userdetails.setProfileImageName(profileImage.getOriginalFilename());

		try {
			fileStorage.storeUserProfileImage(profileImage);
			log.info("File uploaded successfully! -> filename = " + profileImage.getOriginalFilename());
		} catch (Exception e) {
			log.info("Fail! -> uploaded filename: = " + profileImage.getOriginalFilename());
		}

		Resource path = fileStorage.loadprofileImage(profileImage.getOriginalFilename());
		System.out.println("PATH :=" + path.toString());
		userdetails.setProfileImageUrl(path.toString());
		UserInfo updatedimage = userDetailsRepository.save(userdetails);
		response = server.getSuccessResponse("Successful", updatedimage);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "retreieving by userid", response = UserInfo.class)
	@RequestMapping(value = "/find-user-by-id", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> findUser(@RequestParam long id) throws IOException, ParseException {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		UserInfo fecthed = userDetailsRepository.findById(id);
		response = server.getSuccessResponse("Uploded Successfully", fecthed);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "delete-user", response = UserInfo.class)
	@RequestMapping(value = "/delete-user", method = RequestMethod.DELETE)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> delete(@RequestParam long id) throws IOException, ParseException {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		
		
		UserInfo userdelete = userDetailsRepository.findById(id);
		if(userdelete!=null)
		{
		if (userdelete.getProfileImageUrl() != null) {
			File file = new File(userdelete.getProfileImageUrl());
			if (!file.exists()) {
				log.info("no file exists");
				System.out.println("Directory does not exist.");
			} else {

				file.deleteOnExit();
			}

			System.out.println("Done");

		}
		userDetailsRepository.deleteById(id);
		}


		
		List<FileInfo> filedelete=fileInfoRepository.findByUserId(id);
		if(filedelete!=null)
		{
			fileInfoRepository.deleteByUserId(id);
		}
		
		
		

		followingGroupRepository.deleteByUserId(id);
		

		response = server.getSuccessResponse("deleted successfully", id);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "retreieving user post count", response = UserInfo.class)
	@RequestMapping(value = "/find-user-post-count", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> finduserpostcount(@RequestParam long id) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		long postcount = fileInfoRepository.countByUserId(id);

		response = server.getSuccessResponse("feched succussfuly", postcount);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	// @ApiOperation(value = "retreieving image by hashtag", response =
	// UserInfo.class)
	// @RequestMapping(value = "/find-image-by-hashtag", method =
	// RequestMethod.GET)
	// @ResponseBody
	// public ResponseEntity<Map<String, Object>>
	// findimagebyhashtag(@RequestParam String hashtag) {
	// ServerResponse<Object> server = new ServerResponse<Object>();
	// Map<String, Object> response = new HashMap<String, Object>();
	// List<FileInfo> listimages = new ArrayList<FileInfo>();
	// FileInfo fecheddetails = null;
	//
	// List<HashTag> Stringtag = hashTagRepository.findByHashTag(hashtag);
	// System.out.println(hashTagRepository.findByHashTag(hashtag));
	// if (Stringtag == null || Stringtag.isEmpty()) {
	// log.info("NO Images or Videos with name " + hashtag);
	// response = server.getSuccessResponse("No images or Videos found", null);
	// return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	// }
	//
	// for (int i = 0; i < Stringtag.size(); i++) {
	//
	// fecheddetails =
	// fileInfoRepository.findByid(Stringtag.get(i).getImageid());
	// listimages.add(fecheddetails);
	// }
	//
	// response = server.getSuccessResponse("feched succussfuly", listimages);
	// return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	//
	// }

	@ApiOperation(value = "updating hashtag", response = UserInfo.class)
	@RequestMapping(value = "/update-imagehashtag", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> updatehashtag(@RequestParam long id, @RequestParam long imageid,
			@RequestParam String tag) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		HashTag tagvalue = null;
		HashTag hashtagdetails = hashTagRepository.findByuserIdAndImageid(id, imageid);
		try {
			tagvalue = new ObjectMapper().readValue(tag, HashTag.class);

		} catch (IOException e) {

			e.printStackTrace();
		}

		hashtagdetails.setHashTag(tagvalue.getHashTag());
		System.out.println(tag);
		HashTag updatehashtag = hashTagRepository.save(hashtagdetails);
		response = server.getSuccessResponse("updated  successfully", updatehashtag);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	@RequestMapping(value = "/uploadvideo", method = RequestMethod.POST, headers = ("content-type=multipart/*"))
	@ResponseBody
	public ResponseEntity<Map<String, Object>> upload(@RequestParam("id") long id,
			@RequestParam("file") MultipartFile file, @RequestParam("tag") String tag) throws IOException {

		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		UserInfo uservalidation = userDetailsRepository.findById(id);
		if (uservalidation == null) {
			response = server.getNotFoundResponse("invalid userid", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		}

		FileInfo fileInfo = new FileInfo();
		UserInfo userdetails = new UserInfo();
		Date date = new Date(System.currentTimeMillis());
		fileInfo.setDate(date);
		fileInfo.setFileName(file.getOriginalFilename());
		fileInfo.setUserId(id);
		fileInfo.setActive(true);
		userdetails.setId(id);
		try {
			fileStorage.store(file);
			log.info("File uploaded successfully! -> filename = " + file.getOriginalFilename());
		} catch (Exception e) {
			log.info("Fail! -> uploaded filename: = " + file.getOriginalFilename());
		}
		Resource path = fileStorage.loadFile(file.getOriginalFilename());
		System.out.println("PATH :=" + path.toString());
		fileInfo.setUrl(path.toString());
		FileInfo fileinserted = fileInfoRepository.save(fileInfo);

		HashTag hashtag = null;
		try {
			hashtag = new ObjectMapper().readValue(tag, HashTag.class);
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (tag != null) {
			/* Note:- we can remove userID from the hastag entity */
			hashtag.setUserId(id);
			hashtag.setImageid(fileInfo.getId());
			HashTag tagData = hashTagRepository.save(hashtag);

			HashtagVideoMap mappingtag = new HashtagVideoMap();
			log.info("ineinserted.getId() :+=" + fileinserted.getId());
			mappingtag.setVideoId(fileinserted.getId());

			log.info("tagData.getId() :+=" + tagData.getId());

			mappingtag.setTagId(tagData.getId());
			mappingtag.setMapped(true);

			HashtagVideoMap mappedData = hashtagVideoMapRepository.save(mappingtag);
			log.info("mapped Successfully");

		}

		response = server.getSuccessResponse("Uploded Successfully", fileinserted);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	@RequestMapping(value = "/uploadmultiple", method = RequestMethod.POST, headers = ("content-type=multipart/*"))
	@ResponseBody
	public ResponseEntity<Map<String, Object>> uplodVideos(@RequestParam("id") long id,
			@RequestParam("file") List<MultipartFile> files, @RequestParam("tag") List<String> tag) throws IOException {
		List<FileInfo> fileinsertedlist = new ArrayList<>();
		FileInfo fileinserted = null;
		HashTag hashtag = new HashTag();
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		int i = 0;
		UserInfo uservalidation = userDetailsRepository.findById(id);
		if (uservalidation == null) {
			response = server.getNotFoundResponse("invalid userid", null);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		}

		for (MultipartFile file : files) {

			try {
				fileStorage.storemultiple(files);
				log.info("File uploaded successfully! -> filename = " + file.getOriginalFilename());
			} catch (Exception e) {
				log.info("Fail! -> uploaded filename: = " + file.getOriginalFilename());
			}

			FileInfo fileInfo = new FileInfo();
			UserInfo userdetails = new UserInfo();
			fileInfo.setFileName(file.getOriginalFilename());
			fileInfo.setUserId(id);
			userdetails.setId(id);
			Date date = new Date(System.currentTimeMillis());
			fileInfo.setDate(date);
			Resource path = fileStorage.loadFile(file.getOriginalFilename());
			System.out.println("PATH :=" + path.toString());
			fileInfo.setUrl(path.toString());
			fileinserted = fileInfoRepository.save(fileInfo);
			fileinsertedlist.add(fileinserted);
			System.out.println("fileinserted : =" + fileinserted.getId());
			System.out.println("fileinsertedlist : =" + fileinsertedlist);

		}

		System.out.println("FileID :=" + fileinserted.getId());

		System.out.println(tag.get(i) + "index index");
		hashtag = new ObjectMapper().readValue(tag.get(i), HashTag.class);

		for (String values : tag) {
			try {
				hashtag = new ObjectMapper().readValue(values, HashTag.class);
				System.out.println("Values :=" + values);
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (tag != null) {

				// Note:- we can remove userID from the hastag entity
				hashtag.setUserId(id);
				HashTag tagData = hashTagRepository.save(hashtag);
				log.info("hastage userID := " + tagData.getUserId());

				HashtagVideoMap mappingtag = new HashtagVideoMap();

				log.info("ineinserted.getId() :+=" + fileinsertedlist.get(i).getId());
				mappingtag.setVideoId(fileinsertedlist.get(i).getId());

				log.info("tagData.getId() :+=" + tagData.getId());

				mappingtag.setTagId(tagData.getId());
				mappingtag.setMapped(true);

				HashtagVideoMap mappedData = hashtagVideoMapRepository.save(mappingtag);
				log.info("mapped Successfully");

				i++;
			}

		}

		response = server.getSuccessResponse("Uploded Successfully", fileinsertedlist);

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	/***
	 * to get the uploaded data by individual user
	 */

	@RequestMapping(value = "/view-videos-by-userId", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> fetchfilesuplodedbyUser(@RequestParam("id") long id) throws IOException {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		List<FileInfo> files = (List<FileInfo>) fileInfoRepository.findByUserIdOrderByDateDesc(id);
		long userpostscount = fileInfoRepository.countByUserId(id);

		response = server.getSuccessResponse("fetched", files);

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}
	
//when user upload anything the latest uploaded should come first (date and time shuffle)
	@ApiOperation(value = "getfiles/date", response = Likes.class)
	@RequestMapping(value = "/likes", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> fileLike(@RequestParam long id)
	
	{
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		
		List<FileInfo> userfiles=fileInfoRepository.findByUserIdOrderByDateDesc(id);
		
		
		response = server.getSuccessResponse("fetched", userfiles);

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

		
	}
	
	
	
	

	/*
	 * works for both like and dislike
	 * 
	 */
	@ApiOperation(value = "like_file", response = Likes.class)
	@RequestMapping(value = "/likes", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> fileLike(@RequestParam("userId") long userId,
			@RequestParam("fileId") long fileId, @RequestBody String data) throws IOException, ParseException {
		Likes likesObject = new Likes();
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		Likes likesData = null;
		try {
			likesObject = new ObjectMapper().readValue(data, Likes.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		likesObject.setUserId(userId);
		likesObject.setVideoId(fileId);
		Likes likesObj = likeRepository.findByUserIdAndVideoId(userId, fileId);
		String status = null;
		if (likesObject.getStatus() == Status.Liked) {
			status = "Liked";
		} else {
			status = "DisLiked";
		}
		if (likesObj == null) {
			likesData = likeRepository.save(likesObject);

		} else {
			likesObj.setStatus(likesObject.getStatus());
			likesData = likeRepository.save(likesObj);

		}
		response = server.getSuccessResponse(status, likesData);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@RequestMapping(value = "/retriveuserlikedfiles", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> listoffileLike(@RequestParam("userId") long userId) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		List<Likes> likesData = likeRepository.findByUserIdAndStatus(userId, Status.Liked);
		response = server.getSuccessResponse("liked", likesData);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	/*
	 * works for both comment and uncomment
	 * 
	 */
	@ApiOperation(value = "comment", response = Comments.class)
	@RequestMapping(value = "/comment", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> fileComments(@RequestParam("userId") long userId,
			@RequestParam("fileId") long fileId, @RequestBody String data) throws IOException, ParseException {
		Comments comentsObject = new Comments();
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		try {
			comentsObject = new ObjectMapper().readValue(data, Comments.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		comentsObject.setUserId(userId);
		comentsObject.setVideoId(fileId);

		Comments commentsData = null;
		Comments fetchedComments = commentsRepository.findByUserIdAndVideoId(userId, fileId);

		if (fetchedComments == null) {

			commentsData = commentsRepository.save(comentsObject);

		} else {
			fetchedComments.setComment(comentsObject.getComment());
			commentsData = commentsRepository.save(fetchedComments);
		}
		response = server.getSuccessResponse("commented", commentsData);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@ApiOperation(value = "share_file", response = Comments.class)
	@RequestMapping(value = "/share", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> sharefile(@RequestParam("userId") long userId,
			@RequestParam("fileId") long fileId, @RequestBody String data) throws IOException, ParseException {
		Share shareObject = new Share();
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		System.out.println("sample");

		try {
			shareObject = new ObjectMapper().readValue(data, Share.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		shareObject.setUserId(userId);
		shareObject.setVideoId(fileId);
		Share sharedData = shareRepository.save(shareObject);
		response = server.getSuccessResponse("Successfully share file", sharedData);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	/*
	 * works for both follow/unfollow else we can use unfollow seperatly
	 */

	@RequestMapping(value = "/follow", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> followUser(@RequestParam("id") long id,
			@RequestParam("followingId") long followingId) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		Optional<FollowingGroup> userData = followingGroupRepository.findByUserId(id);

		UserGroupMap fetchedMapData = userGroupMapRepository.findByUserIdAndFollowinguserId(id, followingId);
		if (fetchedMapData == null) {
			mapUsertoUsergroup(id, followingId, userData.get().getId(), userData.get().getUseremail());
			response = server.getSuccessResponse("following-user", null);

		} else {
			unmapuserfromUsergroup(id, followingId, userData.get().getId(), userData.get().getUseremail());
			response = server.getSuccessResponse("un-followed user", null);

		}

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@RequestMapping(value = "/unfollow", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> unfollowUser(@RequestParam("id") long id,
			@RequestParam("followingId") long followingId) {
		Map<String, Object> response = new HashMap<String, Object>();
		ServerResponse<Object> server = new ServerResponse<Object>();

		Optional<FollowingGroup> userData = followingGroupRepository.findByUserId(id);

		unmapuserfromUsergroup(id, followingId, userData.get().getId(), userData.get().getUseremail());
		response = server.getSuccessResponse("unfollowed-Successfull", null);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	public ResponseEntity<Map<String, Object>> mapUsertoUsergroup(long userId, long followinguserId, long groupId,
			String email) {
		log.info("to follow user");
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		UserGroupMap userGroupMap = new UserGroupMap();
		userGroupMap.setGroupId(groupId);
		userGroupMap.setUserId(userId);
		userGroupMap.setUserEmail(email);
		userGroupMap.setFollowinguserId(followinguserId);
		userGroupMap.setMapped(true);

		UserGroupMap usermappedData = userGroupMapRepository.save(userGroupMap);
		log.info("following a user");
		response = server.getSuccessResponse("user-mapped-to-group", usermappedData);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	@RequestMapping(value = "/findallUsers-ingroup", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> findUsersInGroup(@RequestParam("id") long id) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		List<UserGroupMap> strings = userGroupMapRepository.findByUserId(id);

		response = server.getSuccessResponse("fecthed users from group", strings);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	public ResponseEntity<Map<String, Object>> unmapuserfromUsergroup(long userId, long followinguserId, long groupId,
			String email) {

		UserGroupMap fetchedMapData = userGroupMapRepository.findByUserIdAndFollowinguserId(userId, followinguserId);
		System.out.println("fetchedMapData := " + fetchedMapData);

		userGroupMapRepository.deleteById(fetchedMapData.getId());

		log.info("following a user");
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		response = server.getSuccessResponse("un-mapped", null);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

	public ResponseEntity<Map<String, Object>> DefaultfollowingGroup(long userId, String email) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		FollowingGroup groupData = new FollowingGroup();
		groupData.setUserId(userId);
		groupData.setUseremail(email);
		groupData.setGroupname("following");
		groupData.setDefault(true);
		FollowingGroup usergroup = followingGroupRepository.save(groupData);
		log.info(" default followingGroup created");
		response = server.getSuccessResponse("default-group-created", usergroup);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}

	public ResponseEntity<Map<String, Object>> DefaultfollowersGroup(long userId, String email) {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		FollowersGroup groupData = new FollowersGroup();
		groupData.setUserId(userId);
		groupData.setUseremail(email);
		groupData.setGroupname("followers");
		groupData.setDefault(true);
		FollowersGroup usergroup = followersGroupRepository.save(groupData);
		log.info(" default followersGroup created");
		response = server.getSuccessResponse("default-group-created", usergroup);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}

	@ApiOperation(value = "block-user", response = UserInfo.class)
	@RequestMapping(value = "/block", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> blockuser(@RequestParam("data") String username) throws Exception {

		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();

		/*
		 * TO:DO search from list of user either from the main page or
		 * individial user followers group and follwing group and block user
		 * 
		 * Take BlockedUsers group and
		 */

		return null;

	}
	
	
	
//	if u follow one user you should automatically get that paricualr user info 

	@ApiOperation(value = "get-following-user data", response = UserInfo.class)
	@RequestMapping(value = "/dataofusers", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> getfollowinguserstatus(@RequestParam long userid) throws Exception {
		ServerResponse<Object> server = new ServerResponse<Object>();
		Map<String, Object> response = new HashMap<String, Object>();
		List<UserInfo> info = new ArrayList<UserInfo>();	
		List<UserGroupMap> followingusers = userGroupMapRepository.findByUserId(userid);
		for(int i=0; i<followingusers.size();i++)
		{
		UserInfo listofusers=userDetailsRepository.findById(followingusers.get(i).getFollowinguserId());
		info.add(listofusers);
		}
	
	
		response = server.getSuccessResponse("status ",info);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);

	}

//	@ApiOperation(value = "get-following-user status", response = UserInfo.class)
//	@RequestMapping(value = "/statusofusers", method = RequestMethod.POST)
//	@ResponseBody
//	public ResponseEntity<Map<String, Object>> getfollowinguserstatus(@RequestParam long userid) throws Exception {
//		ServerResponse<Object> server = new ServerResponse<Object>();
//		Map<String, Object> response = new HashMap<String, Object>();
//		List<FileInfo> info = new ArrayList<FileInfo>();
//		Optional<UserGroupMap> followingusers = userGroupMapRepository.findByUserId(userid);
//
//		
//			List<FileInfo> statusofuser = fileInfoRepository.findByUserIdOrderByDateDesc(followingusers.get().getFollowinguserId());
//			
//		
//
//			 
//			
//		
//	 
//		response = server.getSuccessResponse("status ", statusofuser);
//		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
//
//	}
//	
////	
////	   private static void sortdates(List<String> datelist)
////	   {
////		   Collections.sort(datelist, new Comparator<String>() {
////	        DateFormat f = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
////	        @Override
////	        public int compare(String o1, String o2) {
////	            try {
////	                return f.parse(o2).compareTo(f.parse(o1));
////	            } catch (ParseException e) {
////	                throw new IllegalArgumentException(e);
////	            }
////	        }
////	    });
//
////List<String>datelist=new ArrayList<String>(); 
////for(FileInfo filedates:info)
////{
////	datelist.add(filedates.getDate().toString());
////	System.out.println(filedates.getDate().toString());
////	
////}
////		 sortdates(datelist);
////	
		  
		   
				   
	

}